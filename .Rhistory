head(hd1)
hd1$result <- nul
hd1$result <- null
hd1$result <- NULL
head(hd1)
str(hd1)
hd1$result  <- apply(hd1, 1, function(row) {if (row$num > 0) row$result = 1})
hd1$result  <- apply(hd1, 1, function(row) {if (row["num"] > 0) row["result"] = 1})
str(hd1)
head(hd1)
hd1 <- hd
hd1$result  <- apply(hd1, 1, function(row) {if (row["num"] > 0) row["result"] = 1 else row["result"] = 0 })
head(hd1)
tail(hd1)
hd1
names(tag)
library(shiny)
names(tag)
library(shinyapp)
library(shinyApp)
install.packages("shinydashboard")
head(hd1)
hd2  <- hd1[-c("num")]
hd2  <- hd1[-c(14)]
head(hd2)
hd <- read.csv("./HeartData.csv", header=TRUE, stringsAsFactors=FALSE)
head(hd)
hd$result  <- apply(hd, 1, function(row)
{if (row["num"] > 0) row["result"] = 1 else row["result"] = 0 })
hd  <- hd[-c(14)]
head(hd)
set.seed(999)
trainIndex  <- createDataPartition(hd$result, p = 0.70, list = FALSE)
library(caret)
#library(corrplot)
library(randomForest)
trainIndex  <- createDataPartition(hd$result, p = 0.70, list = FALSE)
training  <- filtered_pmT[trainIndex,] #70%
training  <- hd[trainIndex,] #70%
dim(training)
testing  <- hd[-trainIndex,] #30%
dim(testing)
set.seed(999)
rfModel <- randomForest(result ~ ., type= "classification", data = training, ntree = 200,
importance = TRUE)
head(training)
str(training)
hd$ca <- as.numeric(hd$ca)
hd$ca
str(hd)
hd$thal <- as.numeric(hd$thal)
str(hd)
hd$result <- as.factor(hd$result)
str(hd)
head(hd)
set.seed(999)
trainIndex  <- createDataPartition(hd$result, p = 0.70, list = FALSE)
training  <- hd[trainIndex,] #70%
dim(training)
testing  <- hd[-trainIndex,] #30%
dim(testing)
summary(hd)
dim(hd)
complete.cases(hd)
ccIndx <- complete.cases(hd)
hdc <- hd[ccIndx,]
dim(hdc)
hd <- read.csv("./HeartData.csv", header=TRUE, stringsAsFactors=FALSE)
head(hd)
hd$result  <- apply(hd, 1, function(row)
{if (row["num"] > 0) row["result"] = 1 else row["result"] = 0 })
hd$ca <- as.numeric(hd$ca)
hd$thal <- as.numeric(hd$thal)
hd$result <- as.factor(hd$result)
hd  <- hd[-c(14)]
ccIndx <- complete.cases(hd)
hd <- hd[ccIndx,]
head(hd)
dim(hd)
set.seed(999)
trainIndex  <- createDataPartition(hd$result, p = 0.70, list = FALSE)
training  <- hd[trainIndex,] #70%
dim(training)
testing  <- hd[-trainIndex,] #30%
dim(testing)
set.seed(999)
rfModel <- randomForest(result ~ ., type= "classification", data = training, ntree = 200,
importance = TRUE)
rfModel
rfModel <- randomForest(result ~ ., type= "classification", data = training, ntree = 500,
importance = TRUE)
rfModel
round(importance(rfModel), 2)
varImpPlot(rfModel, main = "Variable Importance Plot", cex = 0.6, col ="steelblue")
rfModel <- randomForest(result ~ ., type= "classification", data = training, ntree = 700,
importance = TRUE)
rfModel
rfModel <- randomForest(result ~ ., type= "classification", data = hd, ntree = 700,
importance = TRUE)
rfModel
rfModel <- randomForest(result ~ ., type= "classification", data = training, ntree = 700,
importance = TRUE)
pred <- predict(rfModel, testing)
print(confusionMatrix(pred, testing$result))
?svm
rfModel <- randomForest(result ~ ., type= "classification", data = training, ntree = 500,
importance = TRUE)
sqrt(14)
rfModel <- randomForest(result ~ ., type= "classification", data = training, ntree = 500, mtry = 4
importance = TRUE)
rfModel <- randomForest(result ~ ., type= "classification", data = training, ntree = 500, mtry = 4,
importance = TRUE)
rfModel
library(ada)
install.packages("ada")
p4 <- ada(results~., data = hd)
library(ada)
p4 <- ada(results~., data = hd)
p4 <- ada(result ~ ., data = hd)
p4
plot(p4)
p4 <- ada(result ~ ., data = hd, iter=100)
p4
plot(p4)
summary(p4)
varplot(p4)
library(rpart)
p1 <- rpart(result ~ ., data = hd)
summary(p1)
plot(p1)
text(p1)
table(hd$result)
hd["result"]
hd[14]
trainLabels <- training[, "result"]
trainLabels
testLabels <- testing[, "result"]
testLabels
install.packages("gmodels")
library(gmodels)
trainLabels <- training[, "result"]
testLabels <- testing[, "result"]
library(class)
knnModel  <- knn(train = training, test = testing, cl = trainLabels, k = 10)
summary(knnModel)
CrossTable(x = testLabels, y = knnModel, prop.chisq = FALSE)
33+15
48/89
55/89
print(knnModel)
summary(knnModel)
rfModel <- randomForest(result ~ ., type= "classification", data = training, ntree = 500,
importance = TRUE, do.trace = 100))
rfModel <- randomForest(result ~ ., type= "classification", data = training, ntree = 500,
importance = TRUE, do.trace = 100)
print(rfModel)
install.packages("ipred")
library(e1071)
SVMmodel <- svm(result~., data = training)
print(SVMmodel)
SVMmodel
summary(SVMmodel)
SVMpred <- predict(SVMmodel, testing[, -14])
table(pred = SVMpred, true = testing[,14])
?classAgreement
tabSVM <- table(pred = SVMpred, true = testing[,14])
classAgreement(tabSVM)
SVMmodel <- svm(result~., data = training, cross= 10)
summary(SVMmodel)
SVMpred <- predict(SVMmodel, testing[, -14])
table(pred = SVMpred, true = testing[,14])
plot.svm(?)
?plot.svm
plot.svm(SVMmodel)
plot.svm
SVMmodel$coefs
library(e1071)
plot(SVMmodel)
plot(SVMmodel, hd)
plot(SVMmodel, data = hd)
plot(SVMmodel, data = training)
plot(SVMmodel, data = training, result~age)
plot(SVMmodel, data = training, trestbps~age)
plot(SVMmodel, data = training, result~.)
plot(SVMmodel, data = training, thalach~exang)
pairs(SVMPlot)
pairs(SVMmodel)
SVMmodel.SV
summary(SVMmodel)
table(pred = SVMpred, true = testing[,14])
testing[,14]
dim(testing)
rfPred <- predict(rfModel, testing[-14])
rfPred <- predict(rfModel, testing[,-14])
table(pred=rfPred, true = testing[,14])
CrossTable(x = testLabels, y = knnModel, prop.chisq = FALSE)
knnPred <- predict(knnModel, testing[,-14])
summary(knnModels)
summary(knnModel)
(knnModel)$confusion
knnModel$confusion
summary(SVMmodel)
plot(SVMmodel, hd)
table(hd$result)
normalize <- function(x) {
y <- (x - min(x))/(max(x) - min(x))
y
}
str(hd)
dim(hd)
hdNorm <- hd
dim(hdNorm)
hdNorm <- lapply(hdNorm[, 1:13], normalize)
head(hdNorm)
hdNorm <- hd
hdNorm <- data.frame(lapply(hdNorm[, 1:13], normalize))
head(hdNorm)
set.seed(999)
ktrainIndex  <- createDataPartition(hdNorm$result, p = 0.70, list = FALSE
)
str(hdNorm)
dim(hdNorm)
rm(ls())
rm(ls -l)
rm(list = ls())
hdNorm <- hd
hdNorm <- data.frame(lapply(hdNorm[, 1:13], normalize))
normalize <- function(x) {
y <- (x - min(x))/(max(x) - min(x))
y
}
hdNorm <- data.frame(lapply(hdNorm[, 1:13], normalize))
dim(hdNorm)
hd <- read.csv("./HeartData.csv", header=TRUE, stringsAsFactors=FALSE)
str(hd)
head(hd)
table(hd$result)
hd$result  <- apply(hd, 1, function(row)
{if (row["num"] > 0) row["result"] = 1 else row["result"] = 0 })
hd$ca <- as.numeric(hd$ca)
hd$thal <- as.numeric(hd$thal)
hd$result <- factor(hd$result, levels = c(0, 1), labels = c("Negative", "Positive"))
str(hd)
head(hd)
#Dropping the num column, as it has been replaced by result
hd  <- hd[-c(14)]
#Filtering only hte complete cases
ccIndx <- complete.cases(hd)
hd <- hd[ccIndx,]
dim(hd)
head(hd)
table(hd$result)
hdNorm <- hd
hdNorm <- data.frame(lapply(hdNorm[, 1:13], normalize))
head(hdNorm)
dim(hdNorm)
hdNorm$result  <- hd$result
dim(hdNorm)
head(hdNorm)
tail(hd)
tail(hdNorm)
set.seed(999)
ktrainIndex  <- createDataPartition(hdNorm$result, p = 0.70, list = FALSE)
ktraining  <- hdNorm[ktrainIndex,] #70%
dim(ktraining)
ktesting  <- hdNorm[-ktrainIndex,] #30%
dim(ktesting)
library(caret)
ktrainIndex  <- createDataPartition(hdNorm$result, p = 0.70, list = FALSE)
ktraining  <- hdNorm[ktrainIndex,] #70%
dim(ktraining)
ktesting  <- hdNorm[-ktrainIndex,] #30%
dim(ktesting)
sqrt(nrow(ktraining))
floor(sqrt(nrow(ktraining)))
knnModel  <- knn(train = ktraining, test = ktesting, cl = trainLabels, k = kcross)
library(class)
knnModel  <- knn(train = ktraining, test = ktesting, cl = trainLabels, k = kcross)
trainLabels <- ktraining[, "result"]
testLabels <- ktesting[, "result"]
knnModel  <- knn(train = ktraining, test = ktesting, cl = trainLabels, k = kcross)
knnModel  <- knn(train = ktraining, test = ktesting, cl = trainLabels, k = kcross)
kcross  <- floor(sqrt(nrow(ktraining)))
knnModel  <- knn(train = ktraining, test = ktesting, cl = trainLabels, k = kcross)
knnModel  <- knn(train = ktraining, test = ktesting, cl = trainLabels, k = 15)
knnModel  <- knn(train = ktraining, test = ktesting, cl = trainLabels, k = 10)
knnModel  <- knn(train = ktraining, test = ktesting, cl = trainLabels, k = 5)
knnModel[1:3]
knnModel
knnModel  <- knn(train = ktraining, test = ktesting, cl = trainLabels)
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
rm(list=ls())
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
dim(hd)
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
a <- 10
b <- 5
if(b<10) 4
if(b<10) 4 else 5
if(b>10) 4 else 5
hd <- read.csv("./HeartData.csv", header=TRUE, stringsAsFactors=FALSE)
head(hd)
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
predValues  <- data.frame(matrix(NA, nrow =1, ncol=13))
dim(predValues)
(predValues)
predValues$age <- 50
(predValues)
predValues  <- data.frame(matrix(NA, nrow =1, ncol=13))
names(predValues) <- c("age", "sex", "cp","trestbps", "chol","fbs", "restecg","thalach", "exang","oldpeak","slope","ca","thal")
(predValues)
dim(predValues)
str(predValues)
predValues[1,1]=50
dim(predValues)
head(predValues)
shiny::runApp('ShinyApp')
predValues$age
class(predValues)
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
v <- c(63,1,1,145,233,1,2,150,0,2.3,3,0,6)
length(v)
predValues  <- data.frame(matrix(NA, nrow = 1, ncol = 13))
names(predValues) <- c("age", "sex", "cp","trestbps", "chol","fbs", "restecg",
"thalach", "exang","oldpeak","slope","ca","thal")
predValues <- v
predValues
head(predValues)
colNames(predValues)
colnames(predValues)
predValues  <- data.frame(matrix(NA, nrow = 1, ncol = 13))
names(predValues) <- c("age", "sex", "cp","trestbps", "chol","fbs", "restecg",
"thalach", "exang","oldpeak","slope","ca","thal")
predValues$age <- 63.0
head(predValues)
predValues$chol <- 6
head(predValues)
class(predValues)
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
hd <- read.csv("HeartData.csv", stringsAsFactors=FALSE, na.strings = c("", "NA", "NULL", "?"))
hd$result  <- apply(hd, 1, function(row)
{if (row["num"] > 0) row["result"] = 1 else row["result"] = 0 })
hd$result  <- apply(hd, 1, function(row)
{if (row["num"] > 0) row["result"] = 1 else row["result"] = 0 })
hd <- read.csv("HeartData.csv", stringsAsFactors=FALSE, na.strings = c("", "NA", "NULL", "?"))
hd$result  <- apply(hd, 1, function(row)
{if (row["num"] > 0) row["result"] = 1 else row["result"] = 0 })
ccIndx <- complete.cases(hd)
hd <- hd[ccIndx,]
#Diagnosis/Result: This really should be a factor, so
hd$result <- factor(hd$result, levels = c(0, 1), labels = c("Negative", "Positive"))
#Dropping the num column, as it has been replaced by result
hd  <- hd[-c(14)]
library(caret)
library(randomForest)
set.seed(999)
trainIndex  <- createDataPartition(hd$result, p = 0.70, list = FALSE)
training  <- hd[trainIndex,] #70%
#dim(training)
testing  <- hd[-trainIndex,] #30%
#dim(testing)
set.seed(999)
rfModel <- randomForest(result ~ ., type= "classification", data = training, ntree = 200,
importance = TRUE)#, do.trace = 100)
rfModel
rfPred <- predict(rfModel, testing)
rfPred
dim(testing)
print(predict(rfModel, newData = c(63,1,1,145,233,1,2,150,0,2.3,3,0,6)))
predict(rfModel, newData = c(63,1,1,145,233,1,2,150,0,2.3,3,0,6))
summary(predict(rfModel, newData = c(63,1,1,145,233,1,2,150,0,2.3,3,0,6)))
r <- predict(rfModel, newData = c(63,1,1,145,233,1,2,150,0,2.3,3,0,6))
r
predValues  <- data.frame(matrix(NA, nrow = 1, ncol = 13), stringsAsFactors = FALSE)
names(predValues) <- c("age", "sex", "cp","trestbps", "chol","fbs", "restecg",
"thalach", "exang","oldpeak","slope","ca","thal")
predValue[1,] <- v
predValues[1,] <- v
head(predValues)
r <- predict(rfModel, newData = predValues)
r
str(predValues)
r <- predict(rfModel, newData = predValues, type="class")
r
r$error
dim(predValues)
View(hd)
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
predValues[1]
predValues[1,]
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
rfModel$finalModel
print(rfModel$finalModel)
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
shiny::runApp('ShinyApp')
values$df  <- data.frame(nrow = 1, ncol = 13), stringsAsFactors = FALSE)
values$df  <- data.frame(nrow = 1, ncol = 13, stringsAsFactors = FALSE)
values <- reactiveValues()
values$df  <- data.frame(matrix(NA, nrow = 1, ncol = 13), stringsAsFactors = FALSE)
class(values)
class(values$df)
values$df <- reactiveValues()
#values$df  <- data.frame(matrix(NA, nrow = 1, ncol = 13), stringsAsFactors = FALSE)
names(values$df) <- c("age", "sex", "cp","trestbps", "chol","fbs", "restecg",
"thalach", "exang","oldpeak","slope","ca","thal")
values$df <- reactiveValues()
userEntry <- observe({
values$df$age <-input$age
values$df$sex <- if(input$sex == 2) 0
values$df$dflues$cp <- input$cp
values$df$trestbps <- input$trestbps
values$df$chol <- input$chol
values$df$fbs <- if(input$fbs == 2) 0
values$df$restecg <- input$restecg - 1
values$df$thalach <- input$thalach
values$df$exang <- if(input$exang == 2) 0
values$df$oldpeak <- input$oldpeak
values$df$slope <- input$slope - 1
values$df$ca <- input$ca
values$df$thal <- if(input$thal == 1) 3
else if(input$thal == 2) 6
else 7
})
userEntry
shiny::runApp('ShinyApp')
setwd("D:/Coursera/DataProducts/DataProductsProject")
library(shinyapps)
library(rsconnect)
deployApp()
install_github('slidify', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('ramnathv/slidify')
install_github('ramnathv/slidifyLibraries')
setwd("D:/Coursera/DataProducts/ProjectPresentation")
author("Heart_Disease_Prediction")
library(slidify)
author("Heart_Disease_Prediction")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
browseURL("index.html")
browseURL("index.html")
